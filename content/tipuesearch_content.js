var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'About.html'}, {'title': 'python３８２更新', 'text': '\n 首先到" https://www.python.org/downloads/release/python-382/ "下載Window x86-64 executable installer，下載完後，執行python-3.8.2-amd64.exe\xa0 \n 選Customize installation，再uncheck pip option，就可以繼續安裝置完成。 \n 進入安裝號的對應目錄複製檔案到 " 201906_fall/data" \n SciTE下載: 從 "\xa0 https://www.scintilla.org/SciTEDownload.html \xa0" 下載 " \xa0 full 64-bit download \xa0" 載完病解壓縮後，搬移至data下(有需要的話)，接著到相應的目錄執行SciTE.exe，開啟後到 OPTION>>>OPEN GLOBAL OPTION FILE進行切換到UTF-8編碼即開啟即時更新:\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0 將code.page=0更改成code.page=65001(切換到UTF-8編碼)\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 將#load.on.activate=1的井字號拿掉(開啟即時更新)，儲存，關閉SciTE。\xa0 \n ＭＳＹＳ２下載： https://www.msys2.org/ \xa0\u3000下載msys2-x86_64-20190524.exe\xa0並執行\u3000，點選Ｂｒｏｗｓｅ，選擇２０１９０６＿ｆａｌｌ／ｄａｔａ後，就可開始安裝，安裝結束後，ｕｎｃｈｅｃｋRun MSYS2 64bit now，結束下載流程。 \n protablegit下載: https://git-scm.com/download/win \xa0下載\xa064-bit Git for WindowsPortable安裝在data目錄下 \n pip下載:到 https://bootstrap.pypa.io/get-pip.py 頁面，滑鼠右鍵另存新檔到CD2020/data執行，到cmd 輸入python get-pip.py開始下載，下載完成後輸入pip，測試pip是否正常運行。 \n 下載可在python使用的模組flask,bs4,xml,elican, mrkdown,flask_cors,leo，指令為pip install flask bs4 lxml pelican markdown flask_cors leo \n git clone 整個倉儲到 data 目錄下並命名目錄為 tmp \n putty下載:下載 putty 放到data裡面，把之前的ssh和.gitconfig放到home裡面測試是否可以成功用ssh推送資料。 \n \n', 'tags': '', 'url': 'python３８２更新.html'}, {'title': 'project', 'text': '', 'tags': '', 'url': 'project.html'}, {'title': '亂數分組', 'text': 'import random \n import requests \n # getNumList 主要在每組最低人數下, 將不足 10 人的分組平均分配至各組 def getNumList(total, eachGrp=10): \n # total is the number of students \n # each group at least 10 students #eachGrp = 10; # may divide into "grpNum" number of group grpNum = total // eachGrp; \n # check grpNum #print(grpNum) \n # vacan list splits = [] \n # find remainder when total number divid into "grpNum" number of group remainder = total % grpNum \n # number of people in one group by calculation calGrp = total // grpNum for i in range(grpNum): splits.append(calGrp) \n # check first splits \n #print(splits) for i in range(remainder): splits[i] += 1 \n # check final splits #print(splits); return splits; # 儲存學生名單資料的 url target_url = "http://mde.tw/cd2020/downloads/2020spring_cd_2a_list.txt" \n # 利用 requests 讀取 url 中的資料 f = requests.get(target_url) \n # get student list from target_url # 利用 splitlines() 將資料放入數列 studList studList = f.text.splitlines() # 每組預計分組的最低人數 num_in_one_group = 10 \n # 每組學員暫存數列 gpList = [] \n # 全班分組數列 group = [] \n # 各組人數數列 numList = [] \n # get numList numList = getNumList(len(studList), num_in_one_group) \n # check numList # 列出已經補齊的各組人數數列 print("預計各組人數數列:" + str(numList)) output = "" gth = 1 inc = 0 \n # 弄亂 studList random.shuffle(studList) output += "以下為尚未排序前的各組學員學號: \\n" for i in numList: # 列印區隔符號 output += \'=\' * 20 + "\\n"; output += "group " + str(gth) + " 有 " + str(i) + " 人: \\n" \n # 每組學員暫存數列, 在此 reset gpList = [] for j in range(i): output += studList[j+inc] + "\\n" \n # 在各分組數列中加入將對應的學員學號 gpList.append(studList[j+inc]) gth = gth + 1 inc = inc + j # 將各組學員數列依照學號排序 gpList.sort() group.append(gpList) \n # 列出尚未排序前的分組結果 print(output) \n # 列出已經完成排序的分組數列 print("已經排序後的分組數列:" + str(group)) output = "" \n # 列出已經排序後的分組名單 output += \'=\' * 25 + "\\n" output += \'以下為排序後的各組成員名單:\\n\' gth = 1 \n # 先列出純文字以 \\n 跳行組員資料 for i in range(len(group)): \n # 列印區隔符號 output += \'=\' * 20 + "\\n" output += "group" + str(gth) + "\\n" gpList = [] for j in range(len(group[i])): output += str(group[i][j]) + "\\n" gth = gth + 1 print(output) \n', 'tags': '', 'url': '亂數分組.html'}, {'title': '每周直播內容', 'text': '', 'tags': '', 'url': '每周直播內容.html'}, {'title': 'webots', 'text': '', 'tags': '', 'url': 'webots.html'}, {'title': 'coopliasim', 'text': '', 'tags': '', 'url': 'coopliasim.html'}, {'title': 'COVID-19', 'text': '線上課程流程： 通過電子郵件將 https://meet.google.com 會議網址發送給各組組長 以進行線上會議. 講師使用 Youtube 和 OBS 直播每週的課程內容，並將其 URL 發佈到各班 Gitter. 所有學員使用 Youtube 和 OBS 直播並錄製當週作業, 並將其 URL 發佈到各分組的網站上. 所有學員根據各學員的 Github 提交, Github Page 網站與 Youtube 影片內容, 完成自評與互評.', 'tags': '', 'url': 'COVID-19.html'}]};