var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'About.html'}, {'title': 'python３８２更新', 'text': '\n 首先到" https://www.python.org/downloads/release/python-382/ "下載Window x86-64 executable installer，下載完後，執行python-3.8.2-amd64.exe\xa0 \n 選Customize installation，再uncheck pip option，就可以繼續安裝置完成。 \n 進入安裝號的對應目錄複製檔案到 " 201906_fall/data" \n SciTE下載: 從 "\xa0 https://www.scintilla.org/SciTEDownload.html \xa0" 下載 " \xa0 full 64-bit download \xa0" 載完病解壓縮後，搬移至data下(有需要的話)，接著到相應的目錄執行SciTE.exe，開啟後到 OPTION>>>OPEN GLOBAL OPTION FILE進行切換到UTF-8編碼即開啟即時更新:\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0 將code.page=0更改成code.page=65001(切換到UTF-8編碼)\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 將#load.on.activate=1的井字號拿掉(開啟即時更新)，儲存，關閉SciTE。\xa0 \n ＭＳＹＳ２下載： https://www.msys2.org/ \xa0\u3000下載msys2-x86_64-20190524.exe\xa0並執行\u3000，點選Ｂｒｏｗｓｅ，選擇２０１９０６＿ｆａｌｌ／ｄａｔａ後，就可開始安裝，安裝結束後，ｕｎｃｈｅｃｋRun MSYS2 64bit now，結束下載流程。 \n protablegit下載: https://git-scm.com/download/win \xa0下載\xa064-bit Git for WindowsPortable安裝在data目錄下 \n pip下載:到 https://bootstrap.pypa.io/get-pip.py 頁面，滑鼠右鍵另存新檔到CD2020/data執行，到cmd 輸入python get-pip.py開始下載，下載完成後輸入pip，測試pip是否正常運行。 \n 下載可在python使用的模組flask,bs4,xml,elican, mrkdown,flask_cors,leo，指令為pip install flask bs4 lxml pelican markdown flask_cors leo \n git clone 整個倉儲到 data 目錄下並命名目錄為 tmp \n putty下載:下載 putty 放到data裡面，把之前的ssh和.gitconfig放到home裡面測試是否可以成功用ssh推送資料。 \n \n', 'tags': '', 'url': 'python３８２更新.html'}, {'title': 'project', 'text': '', 'tags': '', 'url': 'project.html'}, {'title': 'assignment 1', 'text': '亂數分組 \n import random \n import requests \n # getNumList 主要在每組最低人數下, 將不足 10 人的分組平均分配至各組 def getNumList(total, eachGrp=10): \n # total is the number of students \n # each group at least 10 students #eachGrp = 10; # may divide into "grpNum" number of group grpNum = total // eachGrp; \n # check grpNum #print(grpNum) \n # vacan list splits = [] \n # find remainder when total number divid into "grpNum" number of group remainder = total % grpNum \n # number of people in one group by calculation calGrp = total // grpNum for i in range(grpNum): splits.append(calGrp) \n # check first splits \n #print(splits) for i in range(remainder): splits[i] += 1 \n # check final splits #print(splits); return splits; # 儲存學生名單資料的 url target_url = "http://mde.tw/cd2020/downloads/2020spring_cd_2a_list.txt" \n # 利用 requests 讀取 url 中的資料 f = requests.get(target_url) \n # get student list from target_url # 利用 splitlines() 將資料放入數列 studList studList = f.text.splitlines() # 每組預計分組的最低人數 num_in_one_group = 10 \n # 每組學員暫存數列 gpList = [] \n # 全班分組數列 group = [] \n # 各組人數數列 numList = [] \n # get numList numList = getNumList(len(studList), num_in_one_group) \n # check numList # 列出已經補齊的各組人數數列 print("預計各組人數數列:" + str(numList)) output = "" gth = 1 inc = 0 \n # 弄亂 studList random.shuffle(studList) output += "以下為尚未排序前的各組學員學號: \\n" for i in numList: # 列印區隔符號 output += \'=\' * 20 + "\\n"; output += "group " + str(gth) + " 有 " + str(i) + " 人: \\n" \n # 每組學員暫存數列, 在此 reset gpList = [] for j in range(i): output += studList[j+inc] + "\\n" \n # 在各分組數列中加入將對應的學員學號 gpList.append(studList[j+inc]) gth = gth + 1 inc = inc + j # 將各組學員數列依照學號排序 gpList.sort() group.append(gpList) \n # 列出尚未排序前的分組結果 print(output) \n # 列出已經完成排序的分組數列 print("已經排序後的分組數列:" + str(group)) output = "" \n # 列出已經排序後的分組名單 output += \'=\' * 25 + "\\n" output += \'以下為排序後的各組成員名單:\\n\' gth = 1 \n # 先列出純文字以 \\n 跳行組員資料 for i in range(len(group)): \n # 列印區隔符號 output += \'=\' * 20 + "\\n" output += "group" + str(gth) + "\\n" gpList = [] for j in range(len(group[i])): output += str(group[i][j]) + "\\n" gth = gth + 1 print(output) \n 每組隨機抽選: \n 學員名單 URL: \n \n 2a \n 2b \n \n  每組抽選人數:      \n \n', 'tags': '', 'url': 'assignment 1.html'}, {'title': 'assignment 2', 'text': '討論 topic 0 \n 主題:協同設計出更好的產品 今天，數位產品比以往任何時候都更加複雜。創建它們需要多個團隊 成員，每個成員都有自己的一套技能和專業知識。例如，在Savvy，我們的客戶 與以下人員緊密合作：產品經理，UX設計人員，視覺設計師，開發人員，內容 戰略家和成長專家。 我們使用設計協作來處理這種複雜性。正確完成，設計協作可助力 每個專家都有共同的心態，流程和工具，共同建立更好的 產品更快。 我們編寫了此資源，以幫助其他應用程序創建者採用協作文化和流程。 繼續學習為什麼設計協同對於創造吸引人的產品很重要，以及 經驗。我們還將深入探討設計協作心態和文化，工具的要素 進行有效的設計協作，以及實際工作中的設計協作示例。 什麼是“設計”協同？ 在進入之前，我們需要在同一頁上了解什麼是設計協同…… 簡單來說，設計協同就是在設計優先的環境中進行協同。 由於設計的本質，特別是我們在Savvy所做的設計，設計協同趨向於超越人們通常認為的協作。 通常將協作定義為兩個或兩個以上的人共同完成一項任務 為了實現共同的目標，設計協作涉及更多。 設計協同包括更多具有不同技能，艱鉅挑戰和更大規模的人員,具有深遠影響的目標。 您可能將協同視為兩個人掛在一塊藝術品上。它只需要溝通，團隊合作和四隻手。設計協同是指一組策展人.精心設計訪問者的體驗。他們選擇藝術品，選擇在何處以及如何懸掛藝術品， 它所居住的房間（以及房間的照明，家具），甚至前面的房間和建築物 整個。為什麼設計協作很重要 您可以在沒有協同的情況下設計產品，但是需要一個協同設計過程才能完成 不錯的產品。這就是設計協作如此重要的原因。 我們不僅為客戶構建應用程序。精巧構建複雜且多平台的體驗 內部系統，在某些情況下還包括整個品牌和業務。為此，我們利用專業知識 跨多個核心學科：戰略，設計，開發和增長。每個項目都涉及 許多人都有各自的技能和專長。 設計協作將這些思想融合在一起，將他們各自的專業知識結合在一起 創建解決方案，以解決共同目標的所有方面。而不是一個人遇到問題 角度來看，設計協作將這個問題擺在所有專家面前，迫使他們考慮新 觀點和可能性。 例如，我們在設計過程的早期就讓我們的開發人員參與進來，以確保我們 盡快解決技術機會和局限性。這使我們可以有好處並推動我們的技術能力，同時進一步消除了複雜的障礙處理。它還限制了一個人可以在筒倉中工作的數量，從而使工作保持公開狀態,並強調用戶需求和產品目標。 培養設計協同心態 在設計過程中建立有效的協同時，正確的思維方式大有幫助。它規定了誰進行協同，如何進行以及達到何種目的的準則。 合作適合每個人 設計師有時會認為不是設計師的人沒有資格提供良好的產品 反之。但是出色的設計不只是視覺效果。它涵蓋了有關產品的所有內容，從 它的品牌，工程技術及其成長。 設計協同吸引了許多人，每個人都有自己的觀點和優勢。它給大家一個聲音。這些新鮮的觀點為設計師提供了更多信息。觀點 使設計師能夠針對其他設計有持久並有影響的選擇做出正確的決定， 開發和營銷選擇 與客戶的合作和其他設計師和團隊的合作一樣重要 成員。在Savvy，我們讓客戶參與產品的整個創作過程。我們 花些時間來解釋選項，並與客戶進行討論以確保我們了解他們的想法。 這使我們能夠及早獲得客戶的認可，並從明確的起點和終點開始工作。 更大的曝光量並不是什麼好事，沒有人知道他們正在與客戶第一次合作. 客戶合作意味著無需花費高昂成本就能更快地獲得更清晰的產品 後退和不必要的會議。 很容易陷入當下而忽略全局。通過更早地參與更多的人 而且，您正在與隊友建立更緊密的聯繫，並共同承擔責任， 對產品成功的興趣。您正在創建一個更加開放和透明的流程，因為更緊密聯繫和投入的團隊。 合作是背景性的 客戶向我們提出了複雜的挑戰和目標。更不用說，我們持續努力 與我們的客戶進行長達數月甚至好幾年的交流，並積累了過去的大量知識 決策，研究和其他有價值的地方。 通過採用上下文優先的方法，您可以確保每個人都處於最高水平知識。這樣，他們就可以在產品上做出最明智的決定。 為了做到這一點，我們通過引入所有團隊成員儘早，記錄和記錄會議，建立一些重疊的地方以及過程中的下一個團隊成員就像客戶一樣。 在個案協同的基礎上，上下文也同樣重要。請遵循以下準則以保持 協作中的上下文優先： 在顯示您的工作之前提供上下文。如果您正在工作，則您的工作是否出現在屏幕上 提供背景信息，您已經失去了聽眾的注意力。 描述您要解決的問題或要達到的目標。介紹與當前問題相關的工作。解釋您的想法以及為什麼要這麼做這些決定。請具體說明您要回饋的內容。 合作是開放，誠實和無畏的 將您的工作（和您自己）放在那裡並不容易。情緒會阻礙提供 開放和誠實的反饋，尤其是當您擔心會傷害他人的感受時。 這並不意味著在協同中沒有情感的位置。 感覺如何在設計中很重要。我們為有情感， 在決策中使用情感的人。離開談話可能會縮短 潛在的想法或解決方案。其實，僅圍繞事實和數據進行實際的討論是不會的。 提供完整圖片。在最壞的情況下，它可能是不相關或提供虛假的敘述。 在Savvy，我們使我們的團隊對收到反饋“無所畏懼”。這意味著放手 關於我們為自己創造的東西而被批評的任何焦慮。這也意味著了解我們 在一起變得更強大，更有機會創造偉大的事物。無所畏懼，我們 更好地信任並相互授權，以提供誠實和周到的反饋。 我們的團隊還相信，不要害怕提供反饋。這意味著了解 需要解決的問題以及客戶的品牌和目標。這也意味著要問很多 提問以發現相關思想或幫助指導決策。 嘗試以探索性和指導性的方式提出反饋意見，以建立並改善工作而不是拆散。您的反饋意見應具有建設性。與其說你不喜歡什麼，不如說 反饋以指出您要幫助解決的問題。在以下方面提供可行的步驟 改善工作，或者至少改善您的思維背後的理由。而且不要忘記 表達您喜歡什麼以及為什麼。 合作不僅僅是新的想法 開放並接受協作反饋是一回事，解析這些想法是另一回事 並將它們用作激發自己的催化劑。這是一項發展起來的高級技能 時間。一種實踐方法是成為更好的聽眾。 通常，在與他人交談時，我們會更多地考慮接下來要說的內容 比別人說什麼這會影響反饋過程，尤其是在設計中，因為我們 在聽到其他意見或解決方案之前，通常都知道我們要說什麼。 當您選擇先聆聽然後再做出反應時，它可以讓您完全理解反饋 有人在介紹您，並讓您更深入-他們使用的觀點是什麼 他們來自哪裡？很有可能這是您在 創建過程。通過聽取並理解反饋的上下文和推理 您正在接受，正在向更多的視角，思維方式和體驗方式開放您的設計。然後，您可以針對挑戰，目標和舉例子測試這些新觀點。 您正在設計用於查看是否更適合用戶。 當所有協作者都在積極聆聽時，更容易接受反饋。 最終，提供良好反饋的技能來自學習如何獲得反饋。當我們做一個 努力成為更好的聽眾，我們也發現自己變得更加謙虛，我們認為，更好的設計師。 尋找和使用正確的設計協作工具 正確的工具在增強團隊的設計協作思維方面大有幫助。 在這 部分，您將了解在協作工具中尋找什麼。 我們還建議我們的工具及自己的經驗。 選擇合適的工具 有效的協作工具為協作者消除了所有障礙，使他們能夠快速輕鬆地訪問和 與工作互動。 這將重點放在提供反饋上。 他們還允許其他人 在不破壞原始設計的情況下進行協作。 過去，我們使用依賴於提供基本版本控制的工具，而不是真正的 協作功能。 例如，設計人員將保存一個Sketch文件並將其上傳到Dropbox。 然後，另一個團隊成員將下載它，進行處理，然後重新上傳。 沒有簡單的方法 在文件移交給他人的情況下進行更改。 我們嘗試了與Github類似的方法， 實踐證明，該工具非常適合管理代碼庫，但在迭代設計工作中卻不那麼重要。 不用說，這些版本控制流程使我們的協作更加耗時， 令人困惑，而且非常不合作。 現在，我們根據協作類型從多種更高級的工具中進行選擇,並且想要實現。 FIGMA 這是一個協作優先的共享工作區工具。 Figma非常適合在其中有多個人 設計文件的相同區域。 您可以觀看隊友設計或在同一個設計上一起即時工作 。 好處: Figma降低了某人在筒倉中工作的能力。 無需添加不必要的修飾或創建靜態可交付結果即可實現協作。 所以 您無需更改工作流程即可展示設計。 可以輕鬆地在其本機環境中查看並與之交互，並隨意進行調整。 何時使用：流量文檔，高保真線框，即時協作和行走 客戶通過一系列屏幕來解釋並獲得有關設計方向的反饋。 Marvel 雖然Figma傾向於感覺更自由和靈活，但Marvel允許更標準化的形式 合作。 這也使我們的客戶可以輕鬆地與我們合作。 好處： Marvel是一個更簡潔，更規範和集中的空間，非常適合與非設計團隊成員合作 。 它消除了客戶支付帳戶或深入了解工具的所有需求 去看工作。 客戶可以下載屏幕並通過Marvel在設備環境中查看它們的運行情況 應用程式。 使用時間：與客戶和開發人員一起呈現更多最終設計工作。 （學習關於 Marvel與其他原型工具的比較。） 其他合作工具 Zeplin是一個有用的傳遞工具，可讓開發人員深入了解設計的細節。 工作。 （我們在這裡更深入地討論Zeplin。） Quip是集思廣益和產品/過程文檔的絕佳平台。 我們用它來記錄 並組織團隊成員在工作時需要了解的所有背景和知識 一個專案。 對於集思廣益而不是視覺關注的新想法也很有用。 請注意，還有許多其他工具可以為協作增加類似的好處， 上面列出的。 該列表代表了在我們日常工作中對我們有效的工具 協作，並不表示所有選項都可能對您的團隊有效. 精明的設計合作過程在實踐中 現在，讓我們採用上面概述的最佳實踐和工具，並展示它們如何組合在一起。 現實生活中的情況。 我們將使用Press Play應用程序中的實時繪圖體驗來演示 設計協作的重要性。 這項經驗涉及到跨學科的團隊成員數量，包括視覺設計師，UX設計人員，開發人員，產品經理，當然還有客戶。 處境與挑戰 Press Play是一個抽獎活動應用程序，可保存每日，每周和每月的圖紙。 用戶獲得門票 觀看廣告，然後選擇五個表情符號輸入繪圖。 然後根據 他們的選擇如何與圖形的隨機選擇表情符號匹配。 這個特殊的任務有 我們為正在等待現場繪畫結果的用戶創造了一個有趣而激動人心的現場體驗。 對於我們來說，為這種體驗創建類似遊戲的動畫非常重要。 我們特別想要 在用戶去看他們的屏幕時在屏幕上喚起一種嬉戲和期待感 所選表情符號與抽獎活動附圖中的表情符號匹配。 就是說，我們需要注意動畫所需的複雜程度及其影響 在整個產品的時間表和成本上。 我們的目標是將保真度提高到 合理的時間，而不會顯著影響項目的預算。 合作過程 第一階段：線框和集思廣益 首先，精明的用戶體驗設計師創建了Press Play的整體用戶體驗和線框，確定了 需要屏幕和每個屏幕的時間安排。 她還提出了一個粗略的概念（如圖 右圖）用於實時繪圖動畫，根據客戶的需求和項目的已建立UX。 她向產品經理和視覺設計師展示了線框和粗糙的動畫設計師。 然後，這三個人都與客戶會面，因此每個人都可以直接聽到反饋。 第二階段：研究與背景 精明的視覺設計師負責創建實際的實時繪圖動畫 新鮮的眼睛，並且對Press Play產品沒有太多的先驗知識。為了起床，他 與UX設計人員和產品經理進行了深入的交談。他還致力於其他研究 有時間了解整體產品目標，挑戰並熟悉工作 至今。如前所述，他是線框演示的一部分，並為客戶反饋。 在這種情況下，他進行了一些與手頭任務直接相關的其他研究。 通過這樣做，他確保自己了解現場繪畫體驗的要求，目標和挑戰。他查看了具有類似經驗和保真度的其他應用，並參考了動畫，以了解最終動畫到底需要顯示什麼（在這種情況下，表情符號和用戶的表情符號選擇）。 在過於束縛解決方案之前，他遇到了一個精明的人 iOS開發人員了解技術限制和注意事項。 然後，我們的視覺設計師和UX設計師集思廣益，對視覺效果至關重要。他們 同意需要為用戶建立緩慢的提示以建立懸念/期望 階段3：循環和反饋 當我們的視覺設計師沿多個不同方向工作時，他選擇了UX設計師 聊聊他在Figma中的進度和設計。通過討論工作，他們激發了更多 想法和迭代，同時確保它們符合客戶期望。還有更多 他手下有很多可靠的選擇，他再次與iOS開發人員會面，以確保一切都在 從技術角度出發。 階段4：客戶的反饋和發展 當我們找到更多，更最終的體驗版本時，視覺設計師走了 通過他們與客戶一起使用Figma。 Press Play產品經理和UX設計師 還提供了反饋和指導。 一旦他們都了解了引起顧客興趣的東西，視覺設計師便開始最大限度地發揮作用。 視覺效果並使它們為開發做好準備。他繼續與iOS開發人員合作， 在技術層面上充分利用該概念。 最終結果 Press Play的實時繪圖動畫是工作中設計協作的一個範例。 一些跨學科專家一起解決更大的設計和開發挑戰 意思是。沒有設計協作，我們將找不到理想的交集 用戶體驗，視覺和技術。 當客戶在他的應用程序中看到動畫生動時，他稱其為“開創性的”。 而且，這種Press Play體驗的研究，合作和創造對我們有幫助 發現產品用戶旅程中的空白。最初，現場繪畫的目的是為了娛樂 向用戶顯示結果的方式。在設計過程中，我們意識到，如果用戶不觀看實時繪圖，他們就會迷失方向，無法體驗終結該圖紙的用戶旅程。 基於這一發現，我們決定在其他兩個地方也改進該應用程序。我們添加了一個 獲勝者範圍的結果/實時繪圖元素，以及用戶的輸贏歷史記錄部分 應用程序的細節部分。最後，需要用戶體驗,來設計協同使我們得以實現這一些未實現的目標。 結論說明 設計協作需要解決建造中伴隨的複雜，關鍵問題 很棒的產品和經驗。 通過利用多個團隊成員的專業知識 跨學科的設計協作可確保團隊從各個角度應對挑戰 並尋求更好的解決方案。 借助正確的思維方式，工具和流程，進行設計協作 使團隊能夠通過創造性思維和迭代來更深入。 我們希望本指南為您提供良好的基礎，以便您可以構建自己的有效設計 協作過程。 您可以在Savvy博客上了解有關設計和產品策略的更多信息， 並隨時在Savvy Apps網站上與我們聯繫以尋求幫助。 心得:協同可說是往後工作不可或缺的工具，不只侷限在專業人士，而且很平易近人，是合作設計不可或缺的工具，合作設計往往會產生衝突，但協同能讓衝突減少，並且持續改進，達到一定的設計效率，另一方面，協同是與各式各樣的人合作，要如何完成一個協同，我覺得當一個好的聽眾與耐心的人，才能讓偕同持續改進。 \n', 'tags': '', 'url': 'assignment 2.html'}, {'title': 'tool', 'text': '', 'tags': '', 'url': 'tool.html'}, {'title': '每周直播內容', 'text': 'w2 \n \n w3 \n \n w5 \n \n w6 \n \n w7 \n \n w9 \n \n w10 \n \n w11 \n \n w12 \n \n w14 \n \n w15 \n \n \n', 'tags': '', 'url': '每周直播內容.html'}, {'title': 'COVID-19', 'text': '線上課程流程： 通過電子郵件將 https://meet.google.com 會議網址發送給各組組長 以進行線上會議. 講師使用 Youtube 和 OBS 直播每週的課程內容，並將其 URL 發佈到各班 Gitter. 所有學員使用 Youtube 和 OBS 直播並錄製當週作業, 並將其 URL 發佈到各分組的網站上. 所有學員根據各學員的 Github 提交, Github Page 網站與 Youtube 影片內容, 完成自評與互評. \n', 'tags': '', 'url': 'COVID-19.html'}, {'title': 'VirtualBox', 'text': 'Setting VirtualBox Network \n 在VirtualBox→Files→Preferences →Network 新增一個網路設定，支援DHCP和IPV6 \n 再到cd2020pj1的虛擬主機設定NAT的Port號 \n IPv4設定：Guest IP是透過ifconfig查出來(IPv6的也是) \n IPv6設定 \n Ubuntu 20.04的網路設定 \n P.S.\xa0 Guest IP 的部分可以在虛擬主機開機的狀態下進行修改設定 \n IP 查詢 \n ifconfig \n 若跳出尚未安裝net-tools的話請安裝 \n sudo apt install net-tools \n 若在 IPv6 環境下有跳出網路錯誤 \n \n IPv6環境設定是否正確 請到 /etc/netplan 目錄下檢查 00-install-config.yaml 檔案內的設定 \n cd /etc/netplan\nsudo vi 00-install-config.yaml \n 00-install-config.yaml \n # This is the network config written by \'subiquity\'\nnetwork:\n\tethernets:\n\t\tenpes3:\n\t\t\tdhcp4: true\n\t\t\tdhcp6: true\n\t\t\tnameservers:\n\t\t\t\taddresses:\n\t\t\t\t\t- 2001:b000:168::1\n\tversion: 2 \n 編輯完成後:wq跳出編輯並儲存，並更新netplan設定 \n sudo netplan apply \n \n \n \n \n proxy問題 請到 /etc/apt/apt.conf.d 目錄下檢查是否有proxy.conf檔案，若沒有，請用新增(直接用vi編輯器開啟proxy.conf就會自動新增) \n cd /etc/apt/apt.conf.d\nsudo vi proxy.conf \n proxy.conf的檔案內容 \n Acquire::http::proxy "http://[2001:288:6004:17::填port號]"; \n 先增完內容後要更新apt \n sudo apt update \n \n \n 網路設定完成後可以啟動wsgi.py \n 再用電腦上的網頁(不是虛擬主機的網頁)到\xa0 https://localhost:8443/看是否成功連上，如果成功連上後就換putty \n Putty設定 \n IPv4 \n Host Name：localhost Port：22 Connection type：SSH \n IPv6 \n Host Name：::1 Port：22 Connection type：SSH \n X11(IPv4或IPv6設定都一樣) \n ▣Enable X11 forwarding \n X display location：localhost:0.0 \n Xming \n 安裝 Xming \n 直接安裝後搬移至可攜 \n 或是直接安裝在隨身碟成可攜 \n 安裝完成後執行XLaunch.exe，全部為預設設定。 \n 在putty執行xtrem看是否會成功跳出 \n File Manager \n 執行nautilus若無法執行，請安裝nautilus \n sudo apt install nautilus \n 安裝完成後再執行一次 nautilus，正常的話就會跳出FileManager \n CoppeliaSim \n 到coppeilasim的目錄下開啟coppeilaSim.sh的檔案 \n ./coppeilaSim.sh \n 之後就會開啟CoppeilaSim了 \n', 'tags': '', 'url': 'VirtualBox.html'}, {'title': 'Linux', 'text': '取自https://linux.vbird.org/linux_basic/redhat6.1/linux_06command.php \n cd \n 這是用來變換工作路徑的指令。一登入 Linux 系統後，root 會在 /root 下，至於使用者會在預設的 /home/username 底下，例如鳥哥的 ID 為 vbird ，則以 vbird 的身份登入後，會到 /home/vbird 這個路徑下。OK！那回到上一層可以用 cd .. 而到相對路徑可到 cd ../bird，至於絕對路徑則是 cd /usr/sbin ！注意喔，在前面的 提示字元會改變路徑名稱 ！ \n cd.. ----回到上一層 cd ----回到使用者目錄 cd/usr/bin---到/usr/bin這一個目錄\xa0 \n \n 這是顯示目前所在目錄的指令，例如在上個表格最後的目錄是 /usr/bin 這個目錄，但是提示字元僅顯示 bin ，如果你想要知道目前所在的目錄，可以輸入 pwd 即可： \xa0 \n pwd------顯示路徑 \n \n 這是用來顯示檔案名稱與內容的指令，檔案的內容說明已經在 \xa0 這裡 \xa0 說明過了，在此不再重複！ ls 的語法為： \xa0 \nls --color -----以彩色顯示檔案資料 ls -l --------- 詳細列出檔案系統結構 ls -a --------- 顯示隱藏檔 （以"."開頭的檔案） ls -al -------- 同時顯示隱藏檔與詳細資料 ls -allmore --- 將檔案內容以一頁一頁顯示 \n \n 這是將檔案內容列出的指令。例如在 /root 下有一個檔名為 .bashrc （這是系統預設的檔案，是隱藏檔），你可以按下 cd 回到 /root 目錄後，執行： \xa0上面顯示的就是 .bashrc 這個檔案的內容啦！基本上，cat 與 DOS 下的 type 是相同的！ \n \n 是否覺得 cat 在讀取較大的檔案的時候會有看不到的資訊呢（如果檔案太大的話），這時候你可以用 more 來一頁頁讀取喔！另外， more 也可以與其他的程式合併使用，例如 ls ！（如下表中，『｜』就是分隔號，可以將兩個指令放在一起執行！） \xa0 \n \n 建立新的目錄！例如我們要建立一個 test 的目錄，你可以這樣下指令： \xa0再執行了 ls -l 之後，你就可以看到 test 這個目錄啦！ \n \n 這是移除的指令，相當於 dos 下的 del 指令！這裡要注意的是，通常在 Linux 系統下，為了怕檔案被誤殺，所以都已經有 -i 這個參數， -i 是指每個檔案被殺掉之前都會確認一次。而如果要連目錄下的東西都一起殺掉的話，就要使用 -rf 這個參數了！你可以用下面這個例子來試試看有什麼不同的現象！ \xa0 \n \n mkdir 是建立目錄，而 rmdir 就是移除目錄的指令。不過，若是欲移除的目錄裡頭有檔案或其他目錄存在，就無法移除，這時就要用剛剛的 rm -rf 來移除啦！ \n \n 這是移動檔案或目錄的指令，例如我們要將 .bashrc 這個檔案移動至根目錄下，則： \xa0而將檔案移動至目前的工作目錄，則加上 "." 這個字！\n 語法： \xa0 mv 來源檔（或目錄） 目的檔（或目錄） \n \n \n 就是 copy 的意思。例如我們要將 .bashrc 這個檔案複製到 /home 底下，可以： \xa0\n 語法： \xa0 cp 來源檔 目的檔 \n \n \n \xa0ln\xa0 -s\xa0 真實目錄或檔案\xa0\xa0 連結的目錄或檔案：這是連結檔案或目錄的指令，通常我們都會加 -s 這個參數，例如我們將 /usr/bin 這個目錄連接到 /root 底下，可以這樣輸入： \xa0不過請注意喔，在你的 /root 底下的 bin 這個目錄中的所有檔案其實都是 /usr/bin 裡面的東西，所以你如果進入 /root/bin 內亂殺東西的話，等於是將 /usr/bin 內的檔案殺掉喔！\n 語法： \xa0 ln -s 來源檔（或目錄） 目的檔（或目錄） \n \n 尋找檔案的指令，會將欲尋找的檔案找出來，例如下面的例子： \xa0上面的意思為： 在 / 目錄（根目錄）下尋找檔名（-name）為 bin 的檔案 ，要注意的是，因為 Linux 的檔案很多，如果你的電腦比較舊，可能會找很久...\n 語法： \xa0 find 路徑 -name 檔名 \n \n \n 相對於 find ，你也可以使用 whereis 這個指令來下達找尋的檔案，whereis 利用曾經找過的系統資訊內的資料去找檔案，所以速度會很快，不過，如果 whereis 找不到的話，並不代表該檔案真的不存在！這個要小心！ \xa0 \n \n 這是變更檔案屬性的指令，通常鳥哥都是以數字作為改變屬性的依據；在檔案的屬性中， r 為4分、w 為2分， x 為1分，如果你想要讓你剛建立的一個檔案，讓大家都看到的話，即你需要『-rw-r--r--』，這是你的三個群組的分數分別是 r+w=6, r=4, r=4，所以可以下達： \xa0 \n \n 記得檔案有『擁有人』及『擁有群組』吧，這個 chown 就是在改變擁有者的指令。例如你 copy 一個檔案給 vbird ，但是因為你的身份是 root ，所以你 copy 過去的檔案 vbird 可能不能使用，因此你需要將檔案的擁有人改成 vbird 才可以！如下： \xa0那如果想要將整個目錄下的檔案都改變擁有者與擁有群組呢？可以下達 chown\xa0 -R\xa0 username:groupname\xa0 directory\xa0 (ex> chown -R root:root /root) 即可喔！ \n \n 作用與 \xa0 chown \xa0 相似，只是在改變檔案或目錄的『擁有群組』。 \n \n 這是用來察看硬碟空間的指令。由於我們目前將檔案都建立在根目錄『/』下，所以只要沒有空間，則所有檔案都無法複製進來系統。不過，若你規劃出多的硬碟，則可以察看你的硬碟空間資訊，如下所示： \xa0上面說，Filesystem 是硬碟所在的劃分表， Used 是指使用掉的硬碟空間（KB），Available是剩下空間，Mounted on則是這顆硬碟代表哪一個目錄。如上所示，根目錄(/)在 hda5 這顆硬碟，總空間有 964312 KB，剩下可用空間為 827680KB，至於 /win98 則在 hda1 中，且全部空間有 1022080 KB。\n 如果要將資料型態以 MB 數顯示的話，可以輸入 df -m 來達成。 \n \n \n 這是用來察看目錄內所有檔案使用掉的空間的情況，如下所示： \xa0其中， du 預設的檔案輸出資料為 KB，以參數 -m 使檔案資料顯示為 MB。 \n \n \n', 'tags': '', 'url': 'Linux.html'}, {'title': '磁碟與硬體管理', 'text': 'mount \n 這是將硬碟或者是光碟、軟碟接掛上系統的指令！之前有提過，在 Linux 下面，每一個裝置都是一個檔案（或目錄），而每一種裝置的檔案型態都不相同，因此對於 mount 後面加的參數就很重要囉：例如： \xa0\n \n \n \n [root@tsai /root]# mount -t iso9660 /dev/cdrom /mnt/cdrom \xa0 <=光碟 [root@tsai /root]# mount -t vfat /dev/fd0 /mnt/floppy\xa0\xa0\xa0\xa0 \xa0 <=軟碟(windows 系統檔) [root@tsai /root]# mount -t ext2 /dev/fd0 /mnt/floppy\xa0\xa0\xa0\xa0 \xa0 <=軟碟(Linux 系統檔) [root@tsai /root]# mount -t ext2 /dev/hdc1 /mnt/harddisk\xa0 \xa0 <=硬碟 \n \n \n \n 光碟裝置檔=/dev/cdrom、軟碟裝置檔=/dev/fd0、硬碟裝置檔=/dev/hdxx。 如上表所示， -t 是參數，至於 iso9660, vfat, ext2則是這些裝置的檔案型態！後面接的則是這個裝置所在的目錄！千萬記得，這些目錄需要是早已存在的，而且最好是空的目錄，不然目錄裡面原本存在的檔案會不見去！ 另外，注意喔！當你 mount 上光碟機或軟碟的時候，請不要輕易的拿出磁片（而且光碟片也不會被你退出），因為會造成系統讀取的錯誤！你應該用 umount 來退出！指令為 umount\xa0 /mnt/cdrom\xa0 （umount\xa0 裝置所在目錄） \n fdformat \n 這是用來『 低階格式化 』軟碟的指令。（注意：軟碟的裝置檔為 \xa0 /dev/fd0 \xa0 ）不必將軟碟 mount 就可以格式化了，指令內容為： \xa0\n \n \n \n [root@tsai /root]# fdformat /dev/fd0H1440 \n \n \n \n注意喔！在上面的裝置檔案為 \xa0 /dev/fd0H1440 \xa0 ，其中加在 /fd0 之後的 \xa0 H1440 \xa0 為表示 \xa0 1.44MB \xa0 的軟碟容量！在低階格式化之後，還要將軟碟的檔案格式化為 Linux 的 ext2 之型態，則需要使用 \xa0 mke2fs \xa0 指令！ \n fdisk \n 這是對硬碟（也可以對軟碟喔）做分割的程式。基本的用法為=> \xa0 fdisk 裝置檔案 ，假設您有一顆硬碟要重新規劃，而這顆硬碟為 hdc ，則你可以輸入： \xa0\n \n \n \n [root@tsai /root]# fdisk /dev/hdc \n \n \n \n然後，按下 m 會出現 help 的選單，要知道的大概只有兩個子指令，一個是刪除 partition 按 d ，一個是增加 partition 按 n，假設你要增加一個 primary partition，按下 n 再按 p 再按你要的 primary partition 號碼（1-4）就可以了。假設你的 hdc 需要規劃成為一個硬碟（即 hdc1）則在輸入 fdisk /dev/hdc 後，需要按： n （增加） -> \xa0 p （primary partition） -> \xa0 1 （partition 1） -> \xa0 w \xa0 （儲存寫入） -> \xa0 q \xa0 （離開） 同樣的，分割完硬碟（或軟碟）後，要以 \xa0 mke2fs \xa0 格式化！ \n mke2fs \n 這是用來將磁碟格式化成 Linux 系統檔的指令。基本上，只要寫入對的裝置檔案就可以了。例如我們要格式化軟碟的話，或是新的硬碟 hdc1 ，則可以如此寫： \xa0\n \n \n \n [root@tsai /root]# mke2fs -c /dev/fd0 [root@tsai /root]# mke2fs -c /dev/hdc1 \n \n \n \n要記得的是，在你做這個格式化的動作時，軟碟與硬碟均不可 mount 到 Linux 的系統中。 \n mkbootdisk \n 這是製作開機磁片的指令。指令很簡單： \xa0\n \n \n \n [root@tsai /root]# mkbootdisk --device /dev/fd0 `uname -r` \n \n \n \n其中， `uname -r` 是目前 Linux 系統所使用的核心版本，如果你有多個核心版本的話，你以可以直接輸入核心版本。例如在這個網頁中所使用的核心有兩個版本，一個是 2.2.12-20，另一個是 2.2.18，若要以 2.2.18 設定開機的話，可以使用： \xa0 mkbootdisk\xa0 --device\xa0 /dev/fd0\xa0 2.2.18 \xa0 ！ \n badblocks \n 這是用來檢查硬碟或軟碟有沒有壞軌的指令，你可以用底下的方式來下達： \xa0\n \n \n \n [root@tsai /root]# badblocks\xa0 -svw\xa0 /dev/hdc1 \n \n \n \n \n fsck \n 這是用來檢查與修正硬碟錯誤的指令。 注意：通常只有身為 root 且你的系統有問題的時候才使用這個指令，否則在正常狀況下使用此一指令，可能會造成對檔案的危害 ！ \xa0\n \n \n \n [root@tsai /root]#\xa0 fsck\xa0 /dev/hdc1 \n \n \n \n通常使用這個指令的場合都是在系統出現極大的問題，導致你在 Linux 開機的時候得進入單人單機模式下進行維護的行為時，才必須使用此一指令！ \n rpm \n 這是一個安裝或者是解安裝 RedHat 軟體的指令，在 RedHat 中已經有設定了一些有點像 Windows 的軟體安裝功能，這就是 rpm 這套軟體了！而 rpm 所安裝的軟體又分為兩種形式，因此你可以分別使用下面兩種參數對不同的檔案進行安裝： \xa0\n \n \n \n [root@tsai /root]# rpm\xa0 -ivh\xa0 xxxxx.rpm\xa0 \xa0 <==將 xxxxx.rpm 檔案安裝於 Linux 系統中 [root@tsai /root]# rpm\xa0 -ivh\xa0 --nodeps xxxxx.rpm\xa0 \xa0 <==將 xxxxx.rpm 檔案『強制』安裝於 Linux 系統中 [root@tsai /root]# rpm\xa0 -Uvh\xa0 xxxxx.rpm\xa0 \xa0 <==將 xxxxx.rpm 升級 [root@tsai /root]# rpm\xa0 -e\xa0\xa0\xa0 xxxxx.rpm\xa0 \xa0 <==將 xxxxx.rpm 解除安裝 [root@tsai /root]# rpm\xa0 -q\xa0\xa0\xa0 squid\xa0 \xa0 <==察看 squid 這一個軟體的版本 [root@tsai /root]# rpm\xa0 --recompile\xa0 yyyyy.src.rpm\xa0 \xa0 <==安裝檔名為 .src.rpm 的檔案！ \n \n \n \n這裡要注意的是， rpm 的檔案主要有兩種形式，一種是已經經過編譯的 i386.rpm 檔案，令一種是未經編譯的 .src.rpm 檔案，兩種檔案形式的安裝參數是不一樣的，請小心注意！ \n \n \n', 'tags': '', 'url': '磁碟與硬體管理.html'}, {'title': '系統管理員', 'text': 'su \n 這是一個用來轉換你身份成為 super user （系統管理員）的指令，任何人只要知道 root 的密碼，就可以成為 super user，所以密碼可千萬不要外流呀！由於 RedHat 在主機之外的終端機上，無法以 root 的身份直接連線，所以你需要以一般身份的 user 連線之後，再以 su 指令來成為 super user： \xa0\n \n \n \n [vbird@tsai vbird]# su\xa0 \xa0 <==輸入指令 Password:\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 <==在這裡輸入 root 的密碼 [root@tsai vibrd]#\xa0\xa0\xa0\xa0\xa0 \xa0 <==看，使用者名稱變囉！ \n \n \n \n \n clear \n 這是用來清除螢幕畫面用的，沒有什麼太大的用處。通常是你覺得畫面太亂的時候輸入用的！直接輸入 clear 就可以了！ \n dmesg \n 在開機的時候你會發現有很多的訊息出現吧，例如 CPU 的形式、硬碟、光碟型號及硬碟分割表等等。但是訊息都是『刷』的一聲就跑過去了！這些訊息有時候對於系統管理員是很重要的，因為他提供了系統的資訊呀！要看這些訊息你可以用 dmesg 這個指令來觀看！ \xa0\n \n \n \n [root@tsai /root]# dmesg|more \n \n \n \n 加上 |more 的原因是因為訊息太多了，所以可以加入這個管線指令來使畫面暫停！ \n groupadd \n 這是用來增加群組的指令，通常鳥哥都不用這個指令的，因為有更容易使用的指令 \xa0 /bin/userconf \xa0 可以使用哩（注意，在 RedHat 7.0 以後的版本，就要使用 /sbin/userconf 哩）！ \n useradd \n 這是用來增加使用者的指令，鳥哥通常不使用這個指令，你可以使用 \xa0 /bin/userconf \xa0 這個指令，更簡單易用喔（是視窗介面的喔！）（注意，在 RedHat 7.0 以後的版本，就要使用 /sbin/userconf 哩） \n userconf \n 這是用來增加使用者、群組等，且以視窗為介面的一個指令！如果你是以遠端登入，並使用 su 指令成為 super user 的話，直接輸入 userconf 可能會找不到這個指令，你可以輸入： \xa0 /bin/userconf \xa0 來啟動這個指令！（注意，在 RedHat 7.0 以後的版本，就要使用 \xa0 /sbin/userconf \xa0 哩），由於這個指令的圖示較多，請到 這裡 來看看！ \n passwd \n 這是用來更改密碼的指令，很簡單，只要在提示字元下輸入 \xa0 passwd \xa0 ，然後輸入目前的密碼，再輸入兩次欲修改成的新密碼，就修改OK了！不過要注意，密碼的形式： 不能與帳號相同，且需要 8 個字元以上，另外，帳號也不能太簡單！否則系統會不接受！ \xa0\n \n \n \n [vbird@tsai vbird]# passwd Changing password for vbird (current) UNIX password:\xa0\xa0\xa0\xa0\xa0 \xa0 <==這裡輸入目前的密碼 New UNIX password:\xa0\xa0\xa0\xa0 \xa0 <==這裡輸入新的密碼 Retype new UNIX password:\xa0\xa0\xa0\xa0 \xa0 <==這裡再輸入新的密碼一次 passwd: all authentication tokens updated successfully \n \n \n \n \n who \n 這是用來視察目前在系統上的使用者指令，你也可以使用 w 這個指令來下達動作。 \xa0\n \n \n \n [root@tsai /root]# who root\xa0\xa0\xa0\xa0 pts/0\xa0\xa0\xa0 Aug\xa0 2 20:43 \n [root@tsai /root]# w \xa0 8:48pm\xa0 up 4 days,\xa0 5:08,\xa0 1 user,\xa0 load average: 0.00, 0.00, 0.00 USER\xa0\xa0\xa0\xa0 TTY\xa0\xa0\xa0\xa0\xa0 FROM\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 LOGIN@\xa0\xa0 IDLE\xa0\xa0 JCPU\xa0\xa0 PCPU\xa0 WHAT root\xa0\xa0\xa0\xa0 pts/0\xa0\xa0\xa0 192.168.1.2\xa0\xa0\xa0\xa0\xa0\xa0 8:43pm\xa0 0.00s\xa0 0.38s\xa0\xa0 ?\xa0\xa0\xa0\xa0 - \n \n \n \n \n基本上，who 與 w 的功能是相同的，只是 who 僅列出使用者名稱與登入時間，至於 w 則會列出使用者的\n \n 來源位址（IP）：就是 FROM 那一項即是IP； \n 登入時間：即是 LOGIN@ 那一項； \n 工作項目：就是 WHAT 那一項！ \n \n \n whoami \n 這是用來確認你目前的身份的指令，由於你可能會有幾個身份在你的機器上，所以需要以這個指令來確認你的身份，不過由於 Linux 會將使用者名稱寫在提示字元上，所以這個指令目前比較少用到了。 \n top \n 這是用來指示目前系統的服務項目的動態資料。 \xa0\n \n \n \n [root@tsai /root]# top \xa010:14pm\xa0 up 4 days,\xa0 6:34,\xa0 1 user,\xa0 load average: 0.01, 0.01, 0.00 40 processes: 39 sleeping, 1 running, 0 zombie, 0 stopped CPU states:\xa0 0.5% user,\xa0 0.3% system,\xa0 0.0% nice, 99.0% idle Mem:\xa0\xa0 63124K av,\xa0 60844K used,\xa0\xa0 2280K free,\xa0 23604K shrd,\xa0 35648K buff Swap: 104380K av,\xa0\xa0 1684K used, 102696K free\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 10788K cached \n \xa0 PID USER\xa0\xa0\xa0\xa0 PRI\xa0 NI\xa0 SIZE\xa0 RSS SHARE STAT\xa0 LIB %CPU %MEM\xa0\xa0 TIME COMMAND \xa03121 root\xa0\xa0\xa0\xa0\xa0 20\xa0\xa0 0\xa0 1016 1016\xa0\xa0 820 R\xa0\xa0\xa0\xa0\xa0\xa0 0\xa0 0.9\xa0 1.6\xa0\xa0 0:47 top \xa0\xa0\xa0 1 root\xa0\xa0\xa0\xa0\xa0\xa0 0\xa0\xa0 0\xa0\xa0 380\xa0 368\xa0\xa0 320 S\xa0\xa0\xa0\xa0\xa0\xa0 0\xa0 0.0\xa0 0.5\xa0\xa0 0:04 init \xa0\xa0\xa0 2 root\xa0\xa0\xa0\xa0\xa0\xa0 0\xa0\xa0 0\xa0\xa0\xa0\xa0 0\xa0\xa0\xa0 0\xa0\xa0\xa0\xa0 0 SW\xa0\xa0\xa0\xa0\xa0 0\xa0 0.0\xa0 0.0\xa0\xa0 0:00 kflushd \xa0\xa0\xa0 3 root\xa0\xa0\xa0\xa0\xa0\xa0 0\xa0\xa0 0\xa0\xa0\xa0\xa0 0\xa0\xa0\xa0 0\xa0\xa0\xa0\xa0 0 SW\xa0\xa0\xa0\xa0\xa0 0\xa0 0.0\xa0 0.0\xa0\xa0 0:00 kupdate \xa0\xa0\xa0 4 root\xa0\xa0\xa0\xa0\xa0\xa0 0\xa0\xa0 0\xa0\xa0\xa0\xa0 0\xa0\xa0\xa0 0\xa0\xa0\xa0\xa0 0 SW\xa0\xa0\xa0\xa0\xa0 0\xa0 0.0\xa0 0.0\xa0\xa0 0:00 kpiod \xa0\xa0\xa0 5 root\xa0\xa0\xa0\xa0\xa0\xa0 0\xa0\xa0 0\xa0\xa0\xa0\xa0 0\xa0\xa0\xa0 0\xa0\xa0\xa0\xa0 0 SW\xa0\xa0\xa0\xa0\xa0 0\xa0 0.0\xa0 0.0\xa0\xa0 0:00 kswapd \xa0\xa0\xa0 6 root\xa0\xa0\xa0\xa0 -20 -20\xa0\xa0\xa0\xa0 0\xa0\xa0\xa0 0\xa0\xa0\xa0\xa0 0 SW<\xa0\xa0\xa0\xa0 0\xa0 0.0\xa0 0.0\xa0\xa0 0:00 mdrecoveryd \xa0 366 bin\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0\xa0\xa0 0\xa0\xa0 308\xa0 288\xa0\xa0 228 S\xa0\xa0\xa0\xa0\xa0\xa0 0\xa0 0.0\xa0 0.4\xa0\xa0 0:00 portmap \xa0 382 root\xa0\xa0\xa0\xa0\xa0\xa0 0\xa0\xa0 0\xa0\xa0 392\xa0 376\xa0\xa0 328 S\xa0\xa0\xa0\xa0\xa0\xa0 0\xa0 0.0\xa0 0.5\xa0\xa0 0:00 apmd \xa0 435 root\xa0\xa0\xa0\xa0\xa0\xa0 0\xa0\xa0 0\xa0\xa0 488\xa0 480\xa0\xa0 388 S\xa0\xa0\xa0\xa0\xa0\xa0 0\xa0 0.0\xa0 0.7\xa0\xa0 0:00 syslogd \xa0 446 root\xa0\xa0\xa0\xa0\xa0\xa0 0\xa0\xa0 0\xa0\xa0 688\xa0 676\xa0\xa0 316 S\xa0\xa0\xa0\xa0\xa0\xa0 0\xa0 0.0\xa0 1.0\xa0\xa0 0:00 klogd \n \n \n \n \n \n \n 輸入 top 之後，會出現類似上面的顯示情況。上圖中說明了你的記憶體有63124K，而下方的面版說明了目前正在執行中的工作內容！  free \n 這是用來察看記憶體的指令。 \xa0\n \n \n \n [root@tsai /root]# free \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 total\xa0\xa0\xa0\xa0\xa0\xa0 used\xa0\xa0\xa0\xa0\xa0\xa0 free\xa0\xa0\xa0\xa0 shared\xa0\xa0\xa0 buffers\xa0\xa0\xa0\xa0 cached Mem:\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 63124\xa0\xa0\xa0\xa0\xa0 60732\xa0\xa0\xa0\xa0\xa0\xa0 2392\xa0\xa0\xa0\xa0\xa0 23136\xa0\xa0\xa0\xa0\xa0 35648\xa0\xa0\xa0\xa0\xa0 10796 -/+ buffers/cache:\xa0\xa0\xa0\xa0\xa0 14288\xa0\xa0\xa0\xa0\xa0 48836 Swap:\xa0\xa0\xa0\xa0\xa0\xa0 104380\xa0\xa0\xa0\xa0\xa0\xa0 1684\xa0\xa0\xa0\xa0 102696 \n \n \n \n如上圖中，說明總記憶體容量為 63124K，而使用了 60732K，另外，虛擬記憶體（Swap）共有 104380K（亦即共有 100MB 的虛擬記憶體）。 \n quotacheck, edquota \n 這些檔案是用來限制使用者在 Linux 主機上的硬碟使用容量。例如，有十個人同時分享一個 2G 的硬碟空間，但是有一個使用者就用了 1.5 GB 的容量，那相對的，其他人可使用的空間就只有剩下 0.5G 啦！不公平對不對，而且也怕被使用者填充大量的垃圾，而使用系統資源被瓜分掉！因此就有 Quota 這個咚咚的出現啦！由於執行的步驟較為繁瑣，所以額外寫了一個頁面，請到 這裡 來看看。 \n \n', 'tags': '', 'url': '系統管理員.html'}, {'title': '壓縮指令', 'text': 'compress \n 這是用來壓縮及解壓縮檔名為 .Z 的壓縮檔。要注意的是，用 compress 壓縮的時候，會將原檔案殺掉而變成檔名為 .Z 的檔案，例如你壓縮一個名為 bird.test 的檔案，則壓縮完成後只會剩下 bird.test.Z 這個壓縮檔！當然，解壓縮的時候也是一樣的，壓縮檔不見了，只有剩下被解壓縮的檔案。指令如下： \xa0\n \n \n \n [root@tsai /root]# compress xxxxx\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 <==將 xxxxx 檔案壓縮成為 xxxxx.Z 檔名 [root@tsai /root]# compress -d xxxxx.Z\xa0\xa0 \xa0 <==將 xxxxx.Z 解壓縮成 xxxxx \n \n \n \n 上表中，解壓縮也可以用 \xa0 uncompress xxxxx.Z \xa0 來達成！ \n gzip \n 這個也是一個壓縮指令，與 compress 很相似，指令的用法也相同！只是壓縮的檔名為 .gz 罷了！ \xa0\n \n \n \n [root@tsai /root]# gzip\xa0 xxxxx\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 <== 這是壓縮指令 [root@tsai /root]# gzip\xa0 -d\xa0 xxxxx.gz\xa0 \xa0 <==這是解壓縮指令 \n \n \n \n \n tar \n 這是一個很棒的壓縮指令，這個指令可以配合 gzip 來進行整個目錄的壓縮！例如有一個名為 bird 的目錄要被你整合成一個檔案，你可以使用： tar\xa0 -xvf\xa0 *.tar\xa0 * （其中 * 為你所要整合的目錄名稱）。 \xa0\n \n \n \n [root@tsai /root]# tar\xa0 -cvf\xa0 bird.tar\xa0 bird\xa0 \xa0 <==只有將目錄轉成一個檔案，沒有壓縮 [root@tsai /root]# tar\xa0 -zcvf\xa0 bird.tar.gz\xa0 bird \xa0 <==壓縮一整個目錄成為 .tar.gz 檔案 \n \n \n \n上面這個例子的 bird.tar 只是將 bird 這個目錄整個拷貝成為一個檔案而已，並沒有壓縮，而 bird.tar.gz 則是將 bird 這個目錄壓縮成為一個檔案！基本上，我們都是使用 -zxvf 來壓縮一整個目錄的！而如果是要解壓縮呢？由於有沒有壓縮所下的參數並不相同，所以針對兩種檔案也是有兩種參數的組合： \xa0\n \n \n \n [root@tsai /root]# tar\xa0 -xvf\xa0 bird.tar [root@tsai /root]# tar\xa0 -zxvf\xa0 bird.tar.gz \n \n \n \n上面則是解壓縮的參數！ 注意了，用 compress 及 gzip 壓縮及解壓縮的時候，會將原檔案取代掉！而使用 tar 來壓縮及解壓縮的時候，原檔案將會與產生檔案同時存在！通常我們都是使用 tar 來進行壓縮或解壓縮的！（當然，你還是可以使用 compress 及 gzip 來壓縮一個大的檔案！） \n \n \n', 'tags': '', 'url': '壓縮指令.html'}, {'title': '一些網路功能', 'text': 'ifconfig \n 這是用來查詢目前我們這個系統的網路卡的狀況的指令，可以查詢 IP、子遮罩網路及網路卡的硬體資訊等等。例如： \xa0\n \n \n \n [root@tsai /root]# ifconfig eth0\xa0\xa0\xa0\xa0\xa0 Link encap:Ethernet\xa0 HWaddr 00:50:FC:20:F1:4D \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 inet addr:192.168.1.2\xa0 Bcast:192.168.1.255\xa0 Mask:255.255.255.0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 UP BROADCAST RUNNING MULTICAST\xa0 MTU:1500\xa0 Metric:1 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 RX packets:7651977 errors:0 dropped:0 overruns:0 frame:0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 TX packets:7467862 errors:0 dropped:0 overruns:0 carrier:0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 collisions:961 txqueuelen:100 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Interrupt:10 Base address:0x6100 \n eth1\xa0\xa0\xa0\xa0\xa0 Link encap:Ethernet\xa0 HWaddr 00:80:C8:5A:87:01 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 UP BROADCAST RUNNING MULTICAST\xa0 MTU:1500\xa0 Metric:1 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 RX packets:7492497 errors:0 dropped:0 overruns:0 frame:0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 TX packets:7617653 errors:0 dropped:0 overruns:0 carrier:0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 collisions:289 txqueuelen:100 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Interrupt:9 Base address:0x6200 \n lo\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Link encap:Local Loopback \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 inet addr:127.0.0.1\xa0 Mask:255.0.0.0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 UP LOOPBACK RUNNING\xa0 MTU:3924\xa0 Metric:1 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 RX packets:512 errors:0 dropped:0 overruns:0 frame:0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 TX packets:512 errors:0 dropped:0 overruns:0 carrier:0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 collisions:0 txqueuelen:0 \n ppp0\xa0\xa0\xa0\xa0\xa0 Link encap:Point-to-Point Protocol \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 inet addr:211.74.249.38\xa0 P-t-P:172.16.11.8\xa0 Mask:255.255.255.255 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 UP POINTOPOINT RUNNING NOARP MULTICAST\xa0 MTU:1492\xa0 Metric:1 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 RX packets:7469726 errors:0 dropped:0 overruns:0 frame:0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 TX packets:7617651 errors:0 dropped:0 overruns:0 carrier:0 \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 collisions:0 txqueuelen:10 \n \n \n \n \n由於上面的例子是使用兩張網路卡，因此會有 eth0 及 eth1 兩個介面，至於 lo 是系統內設的遞迴網路，這是一定會有的咚咚，而且其 inet addr（IP）一定是 127.0.0.1！另外， ppp0 則是 ADSL 撥接之後所產生的虛擬介面（對外的介面！）。在這個例子中，鳥哥使用了兩張網路卡， eth0 用在內部網路， eth1 用在 ADSL 撥接，所以 eth1 就沒有 address。至於第一張網路卡的網路位址是虛擬的 192.168.1.2。而真正的對外聯繫是 ppp0 這一個撥接介面，其 internet 是 211.74.249.38！ \n route \n 這是用來看你的網路通訊包傳送的路由情況的指令。由於通信包是藉由一個一個的路由表來傳遞的，所以觀察你的路由表，對於網路除錯（debuge）就很重要啦！ \xa0\n \n \n \n [root@tsai /root]# route Kernel IP routing table Destination\xa0\xa0\xa0\xa0 Gateway\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Genmask\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Flags Metric Ref\xa0\xa0\xa0 Use Iface 192.168.1.2\xa0\xa0\xa0\xa0 *\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 255.255.255.255 UH\xa0\xa0\xa0 0\xa0\xa0\xa0\xa0\xa0 0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0 eth0 172.16.11.8\xa0\xa0\xa0\xa0 *\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 255.255.255.255 UH\xa0\xa0\xa0 0\xa0\xa0\xa0\xa0\xa0 0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0 ppp0 192.168.1.0\xa0\xa0\xa0\xa0 *\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 255.255.255.0\xa0\xa0 U\xa0\xa0\xa0\xa0 0\xa0\xa0\xa0\xa0\xa0 0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0 eth0 127.0.0.0\xa0\xa0\xa0\xa0\xa0\xa0 *\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 255.0.0.0\xa0\xa0\xa0\xa0\xa0\xa0 U\xa0\xa0\xa0\xa0 0\xa0\xa0\xa0\xa0\xa0 0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0 lo default\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 172.16.11.8\xa0\xa0\xa0\xa0 0.0.0.0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 UG\xa0\xa0\xa0 0\xa0\xa0\xa0\xa0\xa0 0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0 ppp0 \n \n \n \n例如上表中，所有的通訊都是藉由 ppp0 這一個介面卡（Iface）並且其通訊閘（Gateway）為 172.16.11.8 這一個！另外，在虛擬 IP （內部網路）則是藉由 eth0 （192.168.1.2）這一塊網卡來連線的！\n 另外，你也可以使用 route 來加入你的路由表，假如你要將一個網路為 192.56.76.XXX 且子網路為 255.255.255.0 的位置加入你的 eth0 這個網路卡的連線處理中，就可以使用如下的語法： \xa0 \n \n \n \n [root@tsai /root]# route add -net 192.56.76.0 netmask 255.255.255.0 dev eth0 \n \n \n \n \n netstat \n 這也是用來觀察網路狀況的指令。 \xa0\n \n \n \n [root@tsai /root]# netstat Active Internet connections (w/o servers) Proto Recv-Q Send-Q Local Address\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Foreign Address\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 State tcp\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0\xa0\xa0\xa0 126 swks249-38.adsl.:telnet 192.168.1.15:1341\xa0\xa0\xa0\xa0 ESTABLISHED Active UNIX domain sockets (w/o servers) Proto RefCnt Flags\xa0\xa0\xa0\xa0\xa0\xa0 Type\xa0\xa0\xa0\xa0\xa0\xa0 State\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 I-Node Path unix\xa0 2\xa0\xa0\xa0\xa0\xa0 [ ]\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 DGRAM\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 87643\xa0 /dev/log unix\xa0 0\xa0\xa0\xa0\xa0\xa0 [ ]\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 STREAM\xa0\xa0\xa0\xa0 CONNECTED\xa0\xa0\xa0\xa0 116\xa0\xa0\xa0 @00000012 \n \n \n \n在上表黃色的部分，由於鳥哥是在另一部電腦連線進入的，所以網路位址就會不同囉！ \n hostname \n 這只是用來觀看你的主機名稱而已。 \xa0\n \n \n \n [root@tsai /root]# hostname tsai.adsldns.org \n \n \n \n \n ping \n 這是用來察看對方網路是否有動作的指令，這個指令亦可以在 windows 上面執行！ \xa0\n \n \n \n [root@tsai /root]# ping www.kimo.com.tw PING www.kimo.com.tw (202.1.237.21) from 211.74.249.38 : 56(84) bytes of data. 64 bytes from 202.1.237.21: icmp_seq=0 ttl=245 time=56.7 ms 64 bytes from 202.1.237.21: icmp_seq=1 ttl=245 time=58.0 ms 64 bytes from 202.1.237.21: icmp_seq=2 ttl=245 time=58.7 ms 64 bytes from 202.1.237.21: icmp_seq=3 ttl=245 time=52.0 ms 64 bytes from 202.1.237.21: icmp_seq=4 ttl=245 time=72.2 ms --- www.kimo.com.tw ping statistics --- 5 packets transmitted, 5 packets received, 0% packet loss round-trip min/avg/max = 52.0/59.5/72.2 ms \n \n \n \n例如上表中，我們去觀察 www.kimo.com.tw 是否有啟動，看每一列的最後一行，會告訴你訊息回應的時間大約是 56ms！（10 -3 \xa0 sec.） \n nslookup \n 這是用來查詢或反查詢 DNS 的指令！例如我們要知道 奇摩 的網路位址，則可以如此查詢： \xa0\n \n \n \n [root@tsai /root]# nslookup www.kimo.com.tw Server:\xa0 ksdns.seed.net.tw Address:\xa0 139.175.10.20 \n Non-authoritative answer: Name:\xa0\xa0\xa0 www.kimo.com.tw Address:\xa0 202.1.237.21 \n \n \n \n \n系統會告訴你，我們使用的 DNS server 是 ksdns.seed.net.tw，而查詢到的網址是 202.1.237.21。如果需要更詳細的查詢，可以用下面的方式來查！ \xa0\n \n \n \n [root@tsai /root]# nslookup Default Server:\xa0 ksdns.seed.net.tw Address:\xa0 139.175.10.20 \n > set type=any\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 <==告訴系統我們要詳細的資料！ > www.kimo.com.tw Server:\xa0 ksdns.seed.net.tw Address:\xa0 139.175.10.20 \n Non-authoritative answer: www.kimo.com.tw internet address = 202.1.237.21 \n Authoritative answers can be found from: kimo.com.tw\xa0\xa0\xa0\xa0 nameserver = ns1.kimo.com.tw kimo.com.tw\xa0\xa0\xa0\xa0 nameserver = ns1.yahoo.com kimo.com.tw\xa0\xa0\xa0\xa0 nameserver = ns3.europe.yahoo.com kimo.com.tw\xa0\xa0\xa0\xa0 nameserver = ns5.dcx.yahoo.com ns1.kimo.com.tw internet address = 210.59.144.1 ns1.yahoo.com\xa0\xa0 internet address = 204.71.200.33 ns3.europe.yahoo.com\xa0\xa0\xa0 internet address = 217.12.4.71 ns5.dcx.yahoo.com\xa0\xa0\xa0\xa0\xa0\xa0 internet address = 216.32.74.10 \n \n \n \n \n \n talk \n 這是用來交談的指令。 \n traceroute \n 這是用來追查通訊包傳送的情況，例如我們要從 seednet 的網路上查詢到成大的代理伺服器的通訊狀況，可以使用如下的指令： \xa0\n \n \n \n [root@tsai /root]# /usr/sbin/traceroute proxy.ncku.edu.tw traceroute to proxy.ncku.edu.tw (163.28.112.100), 30 hops max, 38 byte packets \xa01\xa0 172.16.11.8 (172.16.11.8)\xa0 128.378 ms\xa0 68.920 ms\xa0 118.313 ms \xa02\xa0 139.175.15.1 (139.175.15.1)\xa0 54.146 ms\xa0 38.557 ms\xa0 44.320 ms \xa03\xa0 R58-37.seed.net.tw (139.175.58.37)\xa0 61.339 ms\xa0 43.177 ms\xa0 39.548 ms \xa04\xa0 R56-162.seed.net.tw (139.175.56.162)\xa0 66.631 ms\xa0 43.182 ms\xa0 41.429 ms \xa05\xa0 203.72.191.222 (203.72.191.222)\xa0 65.538 ms\xa0 61.379 ms\xa0 38.887 ms \xa06\xa0 140.116.241.230 (140.116.241.230)\xa0 40.159 ms\xa0 46.107 ms\xa0 46.854 ms \xa07\xa0 proxy.tnrc.edu.tw (163.28.112.100)\xa0 38.641 ms\xa0 57.286 ms\xa0 46.380 ms \n \n \n \n系統會告訴你，總共通過了7個路由，並列出了每一個路由的 Internet 位址。這個東西有個好處，可以告訴你，當網路出問題時，問題是在哪一個地方！ \n mail \n 這是用來收發信件的指令，詳細的流程我們會在 mail 架站中提及。 \n \n \n', 'tags': '', 'url': '一些網路功能.html'}, {'title': '其他有的沒的', 'text': 'date \n 這是用來察看日期的指令。 \xa0\n \n \n \n [root@tsai /root]# date Fri Aug\xa0 3 19:09:31 CST 2001 \n \n \n \n \n cal \n 這是用來叫出日曆的指令。 \xa0\n \n \n \n [root@tsai /root]# cal \xa0\xa0\xa0\xa0 August 2001 Su Mo Tu We Th Fr Sa \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 1\xa0 2\xa0 3\xa0 4 \xa05\xa0 6\xa0 7\xa0 8\xa0 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \n \n \n \n \n grep \n 這是用來搜尋某些特定字元的指令。例如使用 ps -aux 查詢系統服務時，我們只需要知道 sendmail 是否有動作，則可以使用管線指令『|』來加入 grep 這個指令同時運作。 \xa0\n \n \n \n [root@tsai /root]# ps -aux|grep sendmail root\xa0\xa0\xa0\xa0\xa0\xa0 443\xa0 0.0\xa0 1.0\xa0 2092\xa0 660 ?\xa0\xa0\xa0\xa0\xa0\xa0\xa0 S\xa0\xa0\xa0 Jul26\xa0\xa0 0:36 sendmail: accepti vbird\xa0\xa0\xa0\xa0 8387\xa0 0.0\xa0 0.7\xa0 1240\xa0 492 pts/1\xa0\xa0\xa0 S\xa0\xa0\xa0 19:11\xa0\xa0 0:00 grep sendmail \n \n \n \n上表則表示 sendmail 有在運作了！ \n \n \n', 'tags': '', 'url': '其他有的沒的.html'}, {'title': 'ftp 指令', 'text': 'ftp \n FTP 這個功能不用再多談了吧？這是用來捉取網路上免費檔案的一套軟體。例如我們要連上交大的 FTP 站捉東西，可以如下： \xa0\n \n \n \n [root@tsai /root]#\xa0 ftp linux.cis.nctu.edu.tw Connected to linux.cis.nctu.edu.tw. 220 ProFTPD 1.2.0rc3 Server (Linux.CIS FTP server) [linux.cis.nctu.edu.tw] Name (linux.cis.nctu.edu.tw:vbird): \xa0 anonymous <==輸入 anonymous 匿名登入 331 Anonymous login ok, send your complete email address as your password. Password:\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 <==輸入 name@server.xxx.xxx 型態的 mail-address 密碼 230 Anonymous access granted, restrictions apply. Remote system type is UNIX. Using binary mode to transfer files. ftp> \xa0 dir\xa0\xa0 <==檢查網站上的目錄 200 PORT command successful. 150 Opening ASCII mode data connection for file list. -rw-rw-rw-\xa0\xa0 1 linux\xa0\xa0\xa0 adm\xa0\xa0\xa0\xa0\xa0 39491400 Aug\xa0 3 21:00 00ls-lR -rw-rw-rw-\xa0\xa0 1 linux\xa0\xa0\xa0 adm\xa0\xa0\xa0\xa0\xa0\xa0 3091546 Aug\xa0 3 21:01 00ls-lR.gz -rw-r--r--\xa0\xa0 1 linux\xa0\xa0\xa0 wheel\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 232 Mar 15 22:00 00mirror.today drwxr-xr-x\xa0\xa0 5 linux\xa0\xa0\xa0 wheel\xa0\xa0\xa0\xa0\xa0\xa0\xa0 4096 Oct 29\xa0 2000 java drwxr-xr-x\xa0 14 linux\xa0\xa0\xa0 wheel\xa0\xa0\xa0\xa0\xa0\xa0\xa0 4096 Aug\xa0 2 19:31 kernel drwxr-xr-x\xa0\xa0 4 linux\xa0\xa0\xa0 wheel\xa0\xa0\xa0\xa0\xa0\xa0\xa0 4096 Sep 28\xa0 2000 mirrors 226-Transfer complete. 226 Quotas off ftp>   cd kernel/v2.4 \xa0 <==進入 kernel 底下的 v2.4 目錄 250 CWD command successful. ftp> get linux-2.4.0.tar.bz2.sign \xa0 <==捉下 linux-2.4.0.tar.bz.2.sign 這個檔 local: linux-2.4.0.tar.bz2.sign remote: linux-2.4.0.tar.bz2.sign 200 PORT command successful. 150 Opening BINARY mode data connection for linux-2.4.0.tar.bz2.sign (248 bytes) . 226 Transfer complete. 248 bytes received in 0.014 secs (17 Kbytes/sec) \n \n \n \n \n ncftp \n 在使用 FTP 功能的時候，因為只能一次捉一個檔案，所以要捉一群檔案的時候就會有困擾。這時我們可以使用更容易登入匿名 FTP 站的 ncftp 來執行 FTP 功能！ \xa0\n \n \n \n [root@tsai /root]# ncftp linux.cis.nctu.edu.tw ncftp / > mget\xa0 -R\xa0 kernel\xa0 \xa0 <==將 kernel 這個目錄的東西全捉下來！ \n \n \n \n加上了 \xa0 mget -R 目錄 \xa0 這個指令後，就可以將目錄下的東西完全捉下來！好用吧！ \n gftp \n 這是在 X-Windows 使用的圖形介面 FTP 咚咚！這個咚咚的使用方法就跟 CutFTP 很相似！ \n \n \n', 'tags': '', 'url': 'ftp 指令.html'}, {'title': '相關程式設定指令', 'text': 'set \n 這是用來設定或是觀看目前系統的設定的指令，若只打入 set 則僅會列出目前系統的參數。 \n uname \n 這是用來觀看系統名稱的指令，可以打入 -a 參數來列出所有資訊。 \xa0\n \n \n \n [root@tsai /root]# uname -a Linux vbird.adsldns.org 2.2.12-20 #1 Mon Sep 27 10:25:54 EDT 1999 i586 unknown \n \n \n \n \n setup \n 這個是常常使用來設定系統的一個指令，執行之後會有一個視窗出現，較常使用的是 \xa0 System services \xa0 這一項，可用來設定開機的時候要開放的服務！ \n lilo \n 這是用來設定多重開機，或是開機選項的指令，詳細的流程請到 這裡 來看看！ \n Xconfigurator \n 這是用來簡易的設定 X-Windows 的指令，當你的 X-Windows 確定是可以跑的，而你想要改變一些設定，例如：解析度、色彩度等等，就直接使用這個指令啦！ \n xf86config \n 這是用來設定 X-Windows 的指令！這個指令會比 Xconfigurator 麻煩，不過當你的 X-Windows 沒有辦法跑的時候，這個咚咚是很好用的！ \n \n \n', 'tags': '', 'url': '相關程式設定指令.html'}, {'title': 'X-Window 內的設定指令', 'text': 'startx \n 這是開始執行 X-Windows 的指令！ \n netconf \n 這是網路設定的指令！ \n netcfg \n 這也是網路設定的指令！ \n XF86Setup \n 這是在 X-Windows 下以圖形介面設定 解析度、色彩度 的設定指令。 \n \n \n', 'tags': '', 'url': 'X-Window 內的設定指令.html'}, {'title': '本章問題討論：', 'text': '\n \n \n Q ：在 Linux 上面都是一些線上的英文說明，有沒有中文說明，或更詳細的說明資料呢？ \n \n \n A ： 其實在網路上已經有一票高手在進行 Linux how to 的翻譯工作，這是一個很有意義的事情，因為可以讓新手或者是一些有需要使用 Linux 的人，有一個很好的學習文件。你可以來下面的網址看看： 中文How-to： http://www.linux.org.tw/CLDP/ 英文How-to： http://www.ibiblio.org/mdw/HOWTO/HOWTO-INDEX/howtos.html \n \n \xa0\n Q ：在 Linux 中如何加入新硬碟？ \n \n \n A ： 其實加入新硬碟的方法也是很簡單的： \n \n \n \n 安裝硬碟 ：關掉 Linux 主機電源，調整 Hard Disk 的 Jump （master 或 slave），串接在 IDE 的介面，請注意，留意你增加的硬碟所串接的 IDE 介面為哪一個插槽，例如你插在 IDE2 的 Master ，則你的硬碟應為 hdc； \n 新增硬體於BIOS ：開啟電腦後，按 del 鍵進入 BIOS，選擇 IDE Hard Disk Detector 字樣的選項，讓BIOS去捉硬碟，然後再選擇 Save and Exit； \n Linux 安裝 ：開機進入 Linux 的時候，系統會告訴你有捉到一個新的硬體，你可以按 『configure』 由系統直接安裝即可； \n 格式化硬碟 ：以 root 的身份進入 Linux 後，執行以下兩個程式： \n \n fdisk \xa0 /dev/hdc\xa0 <== hdc 與你的硬碟串接的IDE介面有關，關於這個指令的介紹請參考上面的指令說明； \n mke2fs \xa0 -c\xa0 /dev/hdc1\xa0 <==假設硬碟全部配置成一個大硬碟，則硬碟應為 hdc1 ，以 mke2fs 將系統規劃為 Linux 的系統檔。 \n \n 開機自動載入 ：再來則是以 vi 修改 /etc/fstab 檔案，讓每次開機把這個硬碟直接掛入系統中。例如 hdc1 這顆硬碟掛在 /mnt/hdc1 中，則 fstab 的檔案有點像這樣：（ /dev/hdc1 那一行是新加入的 ！） \n \n \n \n \n \xa0 \n \n \n \n /dev/hda1\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 /\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ext2\xa0\xa0\xa0 defaults\xa0\xa0\xa0\xa0\xa0\xa0\xa0 1 1 /dev/hda5\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 swap\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 swap\xa0\xa0\xa0 defaults\xa0\xa0\xa0\xa0\xa0\xa0\xa0 0 0 /dev/hdc1\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 /mnt/hdc1\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ext2\xa0\xa0\xa0 defaults\xa0\xa0\xa0\xa0\xa0\xa0\xa0 1 1 \n \n \n \n \n \n \n 安裝完成 ：然後再重新開機就可以啦！ \n \n Q ：在 Linux 中如何增加新使用者呢？ \n A ： 無論是加入新使用者或者是加入新群組，都可以使用 \xa0 /bin/userconf \xa0 這個程式來完成，使用這個程式，只要輸入 ID 及 pass word 就可以啦！（不過你必須是 root 的身份才可以執行！）詳細的執行請看上面的指令說明。 \n \n \xa0\n Q ：在 Linux 中如何製作開機片？ \n \n \n A ： 無論何種系統，有個開機片總是比較安心的！ Linux 也是一樣！雖然他很穩定，但是並不是說就不會有問題，因此製作可開機磁片以利解救 Linux 問題是一個好習慣！製作開機片的方法很簡單，只要下達： \n \n \n mkbootdisk \xa0 --device /dev/fd0 `uname -r` \n \n \n', 'tags': '', 'url': '本章問題討論：.html'}, {'title': '小組倉儲', 'text': '小組倉儲:https://s40723114.github.io/cd2020ag1/content/index.html \n 組員 \n 40723104: https://s40723104.github.io/cd2020/content/index.html \n 40723107 :https://s40723107.github.io/cd2020/content/index.html \n 40723114 :https://s40723114.github.io/cd2020/content/index.html (group leader) \n 40723115 :https://s40723115.github.io/cd2020/content/index.html \n 40723118 :https://s40723118.github.io/cd2020/content/index.html \n 40723122 :https://s40723122.github.io/cd2020/content/index.html \n 40723123 :https://s40723123.github.io/cd2020/content/index.html \n 40723140 :https://s40723140.github.io/cd2020/content/index.html \n 40723149 :https://s40723149.github.io/cd2020/content/index.html \n 40723151 :https://s40723151.github.io/cd2020/content/index.html \n 40723153 :https://s40723153.github.io/cd2020 \n 40723154 :https://s40723154.github.io/cd2020/content/index.html \n 40723155 :https://s40723155.github.io/cd2020/content/index.html', 'tags': '', 'url': '小組倉儲.html'}]};