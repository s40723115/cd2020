<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h1>python更新</h1>
<h1>亂數模組</h1>
<p>亂數分組: https://mde.tw/wcm2020/downloads/2020spring_wcm_1a_list.txt was taken from https://osa.nfu.edu.tw/ on Feb. 19, 2020. The most updated list: http://s1.mde.nfu.edu.tw:8000/?semester=1082&amp;courseno=0744 semester: 1082 courseno: 0744 Under https protocol use port 7443, for http use port 8000. 學員名單 URL: http://s1.mde.nfu.edu.tw:8000/?semester=1082&amp;courseno=0744 開始分組 Dart source code for random grouping evenGrouping.dart: import 'dart:html'; InputElement studListUrl = querySelector("#studListUrl"); String studUrl; // 將 Label 改為 Textarea, 避免產生過程結果嵌入所在頁面 TextAreaElement output = querySelector("#output"); main() { querySelector("#submit").onClick.listen((e) =&gt; grouping()); } grouping() { output.innerHtml = ""; if (studListUrl.value != "") { studUrl = studListUrl.value; } else { studUrl = 'https://mde.tw/group/downloads/2019fall_cp_1a_list.txt'; } // 組序由 1 開始 int gth = 1; // 迴圈序號變數 int i; int j; int total; int inc; // 每組學員暫存數列 var gpList = []; // 全班分組數列 var group = []; // 各組人數數列 var numList = []; var courseTitle = 'wcm2020'; HttpRequest.getString(studUrl).then((String resp) { // 利用 trim() 去除字串最後的跳行符號, 之後再利用 split() 根據 \n 轉為數列 var studList = resp.trim().split("\n"); // 數列利用 shuffle() 方法以隨機方法弄亂順序 studList.shuffle(); total = studList.length; output.text += "全班總計" + total.toString() + " 人\n"; numList = getNumList(studList.length); inc = 0; for (i in numList){ // 列印區隔符號 output.text += '=' * 20 + "\n"; output.text += "group $gth 有 " + i.toString() + " 人: \n"; gpList = []; for (j = 0; j &lt; i; j++){ output.text += studList[j+inc] + "\n"; // 在各分組數列中加入將對應的學員學號 gpList.add(studList[j+inc]); } gth = gth + 1; inc = inc + j; //output.text += studList[j] + "\n"; // 逐步將各組暫存的分組數列加入全班分組數列中 gpList.sort(); group.add(gpList); } // 列出全班分組數列 output.text += group.toString() + "\n"; // 列出已經排序後的分組名單 output.text += '=' * 25 + "\n"; output.text += '以下為排序後的各組成員名單: \n'; gth = 1; /* 404231 s4052 4062 s4072 4082 5072 5083 */ // 先列出純文字以 \n 跳行組員資料 for (i=0; i &lt; group.length; i++){ // 列印區隔符號 output.text += '=' * 20 + "\n"; output.text += "group $gth \n"; gpList = []; for (j=0; j &lt; group[i].length; j++){ output.text += group[i][j] + "\n"; } gth = gth + 1; } gth = 1; // 最後列出超文件以 &lt;br\&gt; 跳行組員資料, 包含倉儲與網站 for (i=0; i &lt; group.length; i++){ // 列印區隔符號 output.text += '\n' + '=' * 30 + "<br/>"; output.text += "group $gth <br/>"; gpList = []; for (j=0; j &lt; group[i].length; j++){ if (group[i][j].startsWith('4052') || group[i][j].startsWith('4072')) { output.text += "Repository: <a href='https://github.com/s" + 
                                      group[i][j] + "/" + courseTitle + "'>" + group[i][j] + "</a>" + " | Site: <a href='https://s" + group[i][j] + 
                                      ".github.io/" + courseTitle + "'>" + group[i][j] + "</a><br/>"; } else { output.text += "Repository: <a href='https://github.com/" + 
                                      group[i][j] + "/" + courseTitle +"'>" + group[i][j] + "</a>" + " | Site: <a href='https://" + group[i][j] + 
                                      ".github.io/" + courseTitle + "'>" + group[i][j] + "</a><br/>"; } } gth = gth + 1; } }); } List getNumList(int total){ // total student number // int total = 65; // initial each group expect to be "eachGrp" number of people int eachGrp = 10; // may divide into "grpNum" number of group int grpNum = total ~/ eachGrp; // vacant list var splits = []; // find remainder when total number divid into "grpNum" number of group int remainder = total % grpNum; // number of people in one group by calculation int calGrp = total ~/ grpNum; for (int i = 0; i &lt; grpNum; i++) { splits.add(calGrp); } //print(splits); for (int i = 0; i &lt; remainder; i++) { splits[i] += 1; } //print(splits); return splits; } index.html:</p>
<h1>亂數分組:</h1>
<p>學員名單 URL: <input id="studListUrl" size="50" type="text" value="https://mde.tw/wcm2020/downloads/2020spring_wcm_1a_list.txt"/><br/> <input id="submit" type="submit" value="開始分組"/><br/> <textarea cols="80" id="output" rows="10"></textarea> style.css: body { color: white; font-size: 20px; } input, select, textarea { font-size: 100%; } get_student.py from flask import Flask, request from flask_cors import CORS import requests import bs4 import ssl ''' https://s1.mde.nfu.edu.tw:7443/?semester=1082&amp;courseno=0767 cd 2a 1082/0767 2b 1082/0780 2a 1072/0777 2b 1072/0790 2a 1062/0788 2a 1062/0802 wcm 1082/0744 1072/0754 1062/0765 wcmj 1082/2418 ''' app = Flask(__name__) CORS(app) @app.route('/studlist') @app.route('/') def studlist(): semester = request.args.get('semester') courseno = request.args.get('courseno') if semester == None: semester = '1082' if courseno == None: courseno = '0744' url = 'https://osa.nfu.edu.tw/query/studlist_ajax.php' post_var = {'pselyr': semester, 'pseqno': courseno} result = requests.post(url, data = post_var) soup = bs4.BeautifulSoup(result.content, 'lxml') table = soup.find('table', {'class': 'tbcls'}) data = [] rows = table.find_all('tr') for row in rows: cols = row.find_all('td') cols = [ele.text.strip() for ele in cols] data.append([ele for ele in cols if ele]) # Get rid of empty values output = "" for i in data[2:]: #print(i[0]) output +=i[0] + "\n" return output #return str(pselyr) + " + " +str(pseqno) # 即使在近端仍希望以 https 模式下執行 context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2) context.load_cert_chain('localhost.crt', 'localhost.key') # 取 flaskapp.py 中的 uwsgi 變數設定 uwsgi = False if uwsgi: # 表示程式在雲端執行 application = app else: # 表示在近端執行, 以 python3 wsgi.py 執行 app.run(host='127.0.0.1', port=5443, debug=True, ssl_context=context) nginx sites-available/default settings: server { listen 8000; server_name s1.mde.nfu.edu.tw; charset utf-8; listen 7443 ssl; location /static { alias /home/kmol2019/course_studlist/static/; } location / { include uwsgi_params; uwsgi_pass 127.0.0.1:8087; } ssl_certificate /etc/stunnel/localhost.crt; ssl_certificate_key /etc/stunnel/localhost.key; ssl_session_timeout 5m; ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES"; ssl_prefer_server_ciphers on; try_files $uri $uri/ =404; } uwsgi7.ini [uwsgi] socket = 127.0.0.1:8087 uid = kmol2019 gid = kmol2019 plugins-dir = /usr/lib/uwsgi/plugins/ plugin = python3 master = true logto = /var/log/uwsgi/emperor.log logfile-chown = kmol2019:kmol2019 processes = 4 threads = 2 chdir = /home/kmol2019/course_studlist wsgi-file = /home/kmol2019/course_studlist/get_student.py /etc/systemd/system/cmsimfly.service [Unit] Description=uWSGI to serve CMSimfly After=network.target [Service] User=kmol2019 Group=kmol2019 WorkingDirectory=/home/kmol2019/uwsgi_ini ExecStart=/usr/local/bin/uwsgi --emperor /home/kmol2019/uwsgi_ini [Install] WantedBy=multi-user.target</p>
<h1>每周直播內容</h1>